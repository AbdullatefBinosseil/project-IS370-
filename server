import socket
import json
import os
try:
    MENU_FILE = "menu.json"
    USERS_FILE = "users.json"  # File to store user credentials

    def load_menu():
        if os.path.isfile(MENU_FILE):
            with open(MENU_FILE, "r") as file:
                return json.load(file)
        else:
            return []

    def save_menu(menu):
        with open(MENU_FILE, "w") as file:
            json.dump(menu, file)

    def load_users():
        if os.path.isfile(USERS_FILE):
            with open(USERS_FILE, "r") as file:
                return json.load(file)
        else:
            return {}

    def save_users(users):
        with open(USERS_FILE, "w") as file:
            json.dump(users, file)

    def create_menu_file():
        if not os.path.isfile(MENU_FILE):
            with open(MENU_FILE, 'w') as file:
                json.dump([], file)  # Create an empty menu file

    def handle_client(client_socket, menu, users):

        # Receive choice between signup and login
        choice = client_socket.recv(1024).decode()

        if choice == 'signup':
            # Receive signup details (username, password, role)
            username, password, role = client_socket.recv(1024).decode().split(":")
            # Check if the username already exists
            if username in users:
                client_socket.send("Username already exists".encode())
                return
            # Save the user details to the users file
            users[username] = {"password": password, "role": role}
            save_users(users)
            client_socket.send("Signup successful".encode())
        elif choice == 'login':
            # Receive login details (username, password)
            username, password = client_socket.recv(1024).decode().split(":")
            # Check if the username exists and the password matches
            if username in users and users[username]["password"] == password:
                role_flag = users[username]["role"]
                client_socket.send(f"Login successful|{role_flag}".encode())
                # Continue processing based on user role and actions
                if role_flag == 'customer':
                    send_menu(client_socket, menu)
                    handle_order(client_socket, menu)
                elif role_flag == 'owner':
                    handle_user_actions(client_socket, menu, role_flag)
            else:
                client_socket.send("Invalid credentials".encode())

    def handle_user_actions(client_socket, menu, role_flag):
        action = client_socket.recv(1024).decode()
        if action == 'add_menu_item':
            item_name, item_price = client_socket.recv(1024).decode().split(":")
            if not any(item["name"] == item_name for item in menu):
                menu.append({"name": item_name, "price": item_price})
                save_menu(menu)  # Save the updated menu
                client_socket.send("Menu updated successfully".encode())
            else:
                client_socket.send("Item with the same name already exists".encode())
        elif action == 'modify_menu_item':
            item_name, item_price = client_socket.recv(1024).decode().split(":")
            for item in menu:
                if item["name"] == item_name:
                    item["price"] = item_price
                    save_menu(menu)  # Save the updated menu
                    client_socket.send("Menu updated successfully".encode())
                    break
            else:
                client_socket.send("Item not found".encode())

    def send_menu(client_socket, menu):
        menu_data = json.dumps(menu)
        client_socket.send(menu_data.encode())

    def handle_order(client_socket, menu):
        order_data = client_socket.recv(1024).decode()
        order = json.loads(order_data)
        total_price = calculate_total_price(order, menu)
        client_socket.send(f"Total Price: ${total_price}".encode())
        address_choice = client_socket.recv(1024).decode()
        if address_choice.lower() == 'confirm':
            delivery_address = client_socket.recv(1024).decode()
            if len(delivery_address) == 3:
                client_socket.send("Order confirmed. Confirmation message sent.".encode())
                # Send confirmation message (in a real application, this could be an email or SMS)
            else:
                client_socket.send("Invalid delivery address. Order cancelled.".encode())
        else:
            client_socket.send("Order cancelled.".encode())

    def calculate_total_price(order, menu):
        total_price = 0
        for item_name, quantity in order.items():
            for item in menu:
                if item['name'] == item_name:
                    total_price += quantity * float(item['price'])  # Convert item price to float
                    break
        return total_price

    def main():
        create_menu_file()

        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind(('localhost', 9999))
        server_socket.listen(5)

        print("Server started. Listening for connections...")

        menu = load_menu()
        users = load_users()

        while True:
            client_socket, addr = server_socket.accept()
            print(f"Connection from {addr} established.")

            handle_client(client_socket, menu, users)

            client_socket.close()

except ConnectionRefusedError:
    print("Connection refused. Please check if the server is running.")

except json.JSONDecodeError:
    print("Error decoding JSON data from the server.")
except socket.error as e:
    print(f"Socket error: {e}")
except Exception as e:
    print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
